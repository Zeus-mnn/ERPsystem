@page
@model DynastyBeacon.Pages.StockAdjustment.IndexModel
@{
    ViewData["Title"] = "Stock Adjustment";
}

<div class="d-flex justify-content-between align-items-center mb-4">
</div>

<div class="dashboard-card">
    <div class="card-body">
        <!-- Search and filter section -->
        <div class="row mb-4">
            <div class="col-md-8">
                <div class="input-group">
                    <span class="input-group-text">
                        <i class="fas fa-search"></i>
                    </span>
                    <input type="text"
                           id="stockSearch"
                           class="form-control"
                           placeholder="Search by stock code or description..." />
                </div>
            </div>
            <div class="col-md-4">
                <select id="stockLevelFilter" class="form-select">
                    <option value="all">All Stock Levels</option>
                    <option value="out">Out of Stock</option>
                    <option value="low">Low Stock</option>
                    <option value="normal">Normal Stock</option>
                </select>
            </div>
        </div>

        <!-- Responsive table -->
        <div class="table-responsive">
            <table class="table table-hover">
                <thead>
                    <tr>
                        <th>Stock Code</th>
                        <th>Description</th>
                        <th class="text-end">Purchased</th>
                        <th class="text-end">Sold</th>
                        <th class="text-end">On Hand</th>
                        <th class="text-center">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model.Stock)
                    {
                        <tr data-stock-level="@(item.StockOnHand <= 0 ? "out" : item.StockOnHand <= 5 ? "low" : "normal")">
                            <td>
                                <span class="fw-medium">@item.StockCode</span>
                            </td>
                            <td>@item.StockDescription</td>
                            <td class="text-end">@item.QtyPurchased</td>
                            <td class="text-end">@item.QtySold</td>
                            <td class="text-end">
                                @{
                                    var stockClass = item.StockOnHand switch
                                    {
                                        <= 0 => "text-danger",
                                        <= 5 => "text-warning",
                                        _ => "text-success"
                                    };
                                }
                                <span class="fw-medium @stockClass">
                                    @item.StockOnHand
                                </span>
                            </td>
                            <td class="text-center">
                                <a asp-page="./Edit"
                                   asp-route-stockId="@item.StockID"
                                   class="btn btn-sm"
                                   style="background-color: var(--primary-navy); color: white;"
                                   data-bs-toggle="tooltip"
                                   title="Adjust Stock">
                                    <i class="fas fa-edit"></i>
                                </a>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Initialize tooltips
        document.addEventListener('DOMContentLoaded', function() {
            var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))
            var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl)
            });
        });

        // Combined search and filter functionality
        function filterTable() {
            const searchText = document.getElementById('stockSearch').value.toLowerCase();
            const stockLevel = document.getElementById('stockLevelFilter').value;
            const rows = document.querySelectorAll('tbody tr');

            rows.forEach(row => {
                const stockCode = row.cells[0].textContent.toLowerCase();
                const description = row.cells[1].textContent.toLowerCase();
                const rowStockLevel = row.dataset.stockLevel;

                const matchesSearch = searchText === '' ||
                    stockCode.includes(searchText) ||
                    description.includes(searchText);

                const matchesLevel = stockLevel === 'all' || rowStockLevel === stockLevel;

                if (matchesSearch && matchesLevel) {
                    row.style.display = '';
                    if (searchText !== '') {
                        highlightMatch(row.cells[0], stockCode, searchText);
                        highlightMatch(row.cells[1], description, searchText);
                    } else {
                        // Reset highlighting
                        row.cells[0].innerHTML = `<span class="fw-medium">${row.cells[0].textContent}</span>`;
                        row.cells[1].textContent = row.cells[1].textContent;
                    }
                } else {
                    row.style.display = 'none';
                }
            });
        }

        // Highlight matching text
        function highlightMatch(cell, text, searchText) {
            if (text.includes(searchText)) {
                const regex = new RegExp(`(${searchText})`, 'gi');
                let content = cell.textContent;

                if (cell.cellIndex === 0) {
                    content = `<span class="fw-medium">${content.replace(
                        regex,
                        '<span class="bg-warning">$1</span>'
                    )}</span>`;
                } else {
                    content = content.replace(regex, '<span class="bg-warning">$1</span>');
                }

                cell.innerHTML = content;
            }
        }

        // Event listeners
        document.getElementById('stockSearch').addEventListener('keyup', filterTable);
        document.getElementById('stockLevelFilter').addEventListener('change', filterTable);
    </script>
}