@page
@model DynastyBeacon.Pages.Invoices.CreateInvoiceModel
@{
    ViewData["Title"] = "Create Invoice";
}

<div class="container-fluid">
    <div class="row">
        <!-- Invoice Header -->
        <div class="col-12">
            <div class="card dashboard-card mb-4">
                <div class="card-header">
                    <div class="d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">
                            <i class="fas fa-file-invoice me-2"></i>New Invoice
                        </h5>
                        <div class="text-muted">
                            <span id="currentDate">@DateTime.Now.ToString("dd/MM/yyyy HH:mm")</span>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    <form id="invoiceForm" method="post">
                        @Html.AntiForgeryToken()
                        <div class="row g-3">
                            <!-- Debtor Selection -->
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Select Debtor</label>
                                    <div class="input-group">
                                        <span class="input-group-text">
                                            <i class="fas fa-user"></i>
                                        </span>
                                        <input type="text" id="debtorSearch" class="form-control"
                                               placeholder="Search by name, account code or email">
                                        <input type="hidden" id="selectedDebtorId"
                                               asp-for="Input.DebtorID">
                                    </div>
                                </div>
                            </div>

                            <!-- Invoice Date -->
                            <div class="col-md-3">
                                <div class="mb-3">
                                    <label class="form-label">Invoice Date</label>
                                    <input type="datetime-local" class="form-control" id="Input_InvoiceDate"
                                           asp-for="Input.InvoiceDate" readonly>
                                </div>
                            </div>

                            <!-- Invoice Number (Auto-generated) -->
                            <div class="col-md-3">
                                <div class="mb-3">
                                    <label class="form-label">Invoice Number</label>
                                    <input type="text" class="form-control" id="invoiceNumber"
                                           readonly value="[Auto Generated]">
                                </div>
                            </div>
                        </div>

                        <!-- Debtor Details Card -->
                        <div id="debtorDetails" class="border rounded p-3 mb-4" style="display: none;">
                            <div class="row">
                                <div class="col-md-6">
                                    <h6>Debtor Information</h6>
                                    <p class="mb-1">Account: <span id="debtorAccount"></span></p>
                                    <p class="mb-1">Name: <span id="debtorName"></span></p>
                                    <p class="mb-1">Address: <span id="debtorAddress"></span></p>
                                </div>
                                <div class="col-md-6 text-end">
                                    <h6>Account Status</h6>
                                    <p class="mb-1">Balance: <span id="debtorBalance"></span></p>
                                    <p class="mb-1">Email: <span id="debtorEmail"></span></p>
                                    <p class="mb-1">Phone: <span id="debtorPhone"></span></p>
                                </div>
                            </div>
                        </div>

                        <!-- Line Items Section -->
                        <div class="table-responsive mb-4">
                            <table class="table table-hover" id="lineItemsTable">
                                <thead>
                                    <tr>
                                        <th class="text-start">Stock Code</th>
                                        <th class="text-start">Description</th>
                                        <th class="text-end">Quantity</th>
                                        <th class="text-end">Unit Price</th>
                                        <th class="text-end">Discount</th>
                                        <th class="text-end">Total</th>
                                        <th class="text-center">Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <!-- Line items will be added here dynamically -->
                                </tbody>
                            </table>
                        </div>

                        <!-- Add Item Button -->
                        <div class="mb-4">
                            <button type="button" class="btn btn-outline-primary" onclick="showAddItemModal()">
                                <i class="fas fa-plus me-2"></i>Add Item
                            </button>
                        </div>

                        <!-- Totals Section -->
                        <div class="row justify-content-end">
                            <div class="col-md-4">
                                <div class="card">
                                    <div class="card-body">
                                        <div class="d-flex justify-content-between mb-2">
                                            <span>Subtotal:</span>
                                            <span id="subtotal" class="text-end">R 0.00</span>
                                        </div>
                                        <div class="d-flex justify-content-between mb-2">
                                            <span>VAT (15%):</span>
                                            <span id="vat" class="text-end">R 0.00</span>
                                        </div>
                                        <div class="d-flex justify-content-between mb-2">
                                            <span class="fw-bold">Total:</span>
                                            <span id="grandTotal" class="fw-bold text-end">R 0.00</span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Action Buttons -->
                        <div class="row mt-4">
                            <div class="col-12">
                                <div class="d-flex justify-content-end gap-2">
                                    <button type="button" class="btn btn-outline-secondary" onclick="resetForm()">
                                        <i class="fas fa-times me-2"></i>Cancel
                                    </button>
                                    <button type="submit" class="btn btn-primary" id="processInvoice">
                                        <i class="fas fa-save me-2"></i>Process Invoice
                                    </button>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Add Item Modal -->
<div class="modal fade" id="addItemModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add Stock Item</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label class="form-label">Search Stock</label>
                    <input type="text" class="form-control" id="stockSearch"
                           placeholder="Search by stock code or description">
                </div>
                <div class="mb-3">
                    <input type="hidden" id="selectedStockId">
                    <div class="row">
                        <div class="col-md-6">
                            <label class="form-label">Stock Code</label>
                            <input type="text" class="form-control" id="stockCode" readonly>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Description</label>
                            <input type="text" class="form-control" id="stockDescription" readonly>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-4">
                        <label class="form-label">Quantity</label>
                        <input type="number" class="form-control text-end" id="quantity" min="1">
                    </div>
                    <div class="col-md-4">
                        <label class="form-label">Unit Price</label>
                        <input type="number" class="form-control text-end" id="unitPrice" step="0.01" readonly>
                    </div>
                    <div class="col-md-4">
                        <label class="form-label">Discount</label>
                        <input type="number" class="form-control text-end" id="discount" step="0.01" value="0">
                    </div>
                </div>
                <div class="row mt-3">
                    <div class="col-md-6">
                        <p class="mb-1">Available Stock: <span id="availableStock" class="text-end">0</span></p>
                    </div>
                    <div class="col-md-6 text-end">
                        <p class="mb-1">Line Total: <span id="lineTotal" class="text-end">R 0.00</span></p>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="addLineItem()">Add Item</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let lineItems = [];
        let addItemModal;
        const VAT_RATE = 0.15;

        function initializeInvoiceDate() {
            const now = new Date();
            // Format: YYYY-MM-DDTHH:mm
            const year = now.getFullYear();
            const month = String(now.getMonth() + 1).padStart(2, '0');
            const day = String(now.getDate()).padStart(2, '0');
            const hours = String(now.getHours()).padStart(2, '0');
            const minutes = String(now.getMinutes()).padStart(2, '0');

            const formattedDate = `${year}-${month}-${day}T${hours}:${minutes}`;
            document.getElementById('Input_InvoiceDate').value = formattedDate;
        }

        document.addEventListener('DOMContentLoaded', function() {
            addItemModal = new bootstrap.Modal(document.getElementById('addItemModal'));
            initializeInvoiceDate();  // Initialize date

            // Update date every minute
            setInterval(initializeInvoiceDate, 60000);

            initializeDebtorSearch();
            initializeStockSearch();
            setupFormValidation();
            updateTotals();
        });

        function setupFormValidation() {
            document.getElementById('invoiceForm').addEventListener('submit', handleSubmit);
        }

        async function handleSubmit(e) {
            e.preventDefault();
            if (!validateInvoice()) return;

            const now = new Date();
            const formattedDate = new Date(now.getFullYear(), now.getMonth(), now.getDate(), now.getHours(), now.getMinutes());

            const invoiceData = {
                debtorID: document.getElementById('selectedDebtorId').value,
                invoiceDate: formattedDate.toISOString(),
                lineItems: lineItems.map(item => ({
                    stockID: item.stockId,
                    quantity: item.quantity,
                    unitPrice: item.unitPrice,
                    discount: item.discount
                }))
            };

            try {
                const response = await fetch('?handler=ProcessInvoice', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify(invoiceData)
                });

                const result = await response.json();

                if (!response.ok) {
                    console.error('Server response:', result);
                    throw new Error(result.error || 'Failed to process invoice');
                }

                if (result.success) {
                    showNotification('Invoice processed successfully!', 'success');
                    console.log('Invoice created:', result);
                    resetForm();
                } else {
                    throw new Error(result.error || 'Failed to process invoice');
                }
            } catch (error) {
                console.error('Error:', error);
                showNotification(error.message, 'error');
            }
        }

        function validateInvoice() {
            // Validate debtor selection
            const debtorId = document.getElementById('selectedDebtorId').value;
            if (!debtorId) {
                showNotification('Please select a debtor', 'warning');
                return false;
            }

            // Validate line items
            if (lineItems.length === 0) {
                showNotification('Please add at least one item to the invoice', 'warning');
                return false;
            }

            // Validate date - check if it's a valid date
            const invoiceDateInput = document.getElementById('Input_InvoiceDate');
            if (!invoiceDateInput.value || isNaN(new Date(invoiceDateInput.value).getTime())) {
                showNotification('Please select a valid invoice date', 'warning');
                return false;
            }

            // Validate each line item
            for (const item of lineItems) {
                if (!item.stockId) {
                    showNotification('Invalid stock item found', 'warning');
                    return false;
                }
                if (item.quantity <= 0) {
                    showNotification('Invalid quantity found', 'warning');
                    return false;
                }
                if (item.unitPrice <= 0) {
                    showNotification('Invalid unit price found', 'warning');
                    return false;
                }
                if (item.discount < 0) {
                    showNotification('Invalid discount found', 'warning');
                    return false;
                }
            }

            return true;
        }

        function showNotification(message, type = 'info') {
            // Remove any existing notifications
            const existingNotifications = document.querySelectorAll('.alert');
            existingNotifications.forEach(notification => notification.remove());

            const notification = document.createElement('div');
            notification.className = `alert alert-${type} alert-dismissible fade show position-fixed top-0 end-0 m-3`;
            notification.style.zIndex = '1050';
            notification.style.maxWidth = '500px';
            notification.innerHTML = `
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            `;
            document.body.appendChild(notification);

            setTimeout(() => {
                notification.classList.remove('show');
                setTimeout(() => notification.remove(), 150);
            }, 5000);
        }

        // Debtor Search
        function initializeDebtorSearch() {
            const debtorSearch = document.getElementById('debtorSearch');
            let debounceTimeout;

            debtorSearch.addEventListener('input', function() {
                clearTimeout(debounceTimeout);
                debounceTimeout = setTimeout(async () => {
                    const searchTerm = this.value.trim();
                    if (searchTerm.length < 2) return;

                    try {
                        const response = await fetch(`?handler=SearchDebtors&searchTerm=${encodeURIComponent(searchTerm)}`);
                        if (!response.ok) throw new Error('Search failed');

                        const debtors = await response.json();
                        showDebtorSearchResults(debtors);
                    } catch (error) {
                        console.error('Error:', error);
                        showNotification('Failed to search debtors', 'error');
                    }
                }, 300);
            });
        }

        function showDebtorSearchResults(debtors) {
            const resultsDiv = document.createElement('div');
            resultsDiv.className = 'list-group position-absolute w-100 shadow';
            resultsDiv.style.zIndex = '1000';

            debtors.forEach(debtor => {
                const item = document.createElement('a');
                item.className = 'list-group-item list-group-item-action';
                item.innerHTML = `
                    <div class="d-flex justify-content-between">
                        <div>
                            <strong>${debtor.accountCode}</strong> - ${debtor.name}
                        </div>
                        <div>
                            Balance: ${formatZAR(debtor.balance)}
                        </div>
                    </div>
                `;
                item.addEventListener('click', () => selectDebtor(debtor));
                resultsDiv.appendChild(item);
            });

            const searchInput = document.getElementById('debtorSearch');
            const existingResults = document.querySelector('.list-group');
            if (existingResults) existingResults.remove();

            searchInput.parentNode.appendChild(resultsDiv);
        }

        async function selectDebtor(debtor) {
            document.getElementById('selectedDebtorId').value = debtor.debtorID;
            document.getElementById('debtorSearch').value = `${debtor.accountCode} - ${debtor.name}`;
            document.querySelector('.list-group')?.remove();

            try {
                const response = await fetch(`?handler=DebtorDetails&debtorId=${debtor.debtorID}`);
                if (!response.ok) throw new Error('Failed to load debtor details');

                const details = await response.json();
                updateDebtorDetails(details);
            } catch (error) {
                console.error('Error:', error);
                showNotification('Failed to load debtor details', 'error');
            }
        }

        function updateDebtorDetails(debtor) {
            document.getElementById('debtorDetails').style.display = 'block';
            document.getElementById('debtorAccount').textContent = debtor.accountCode;
            document.getElementById('debtorName').textContent = debtor.name;
            document.getElementById('debtorAddress').textContent = debtor.address || 'N/A';
            document.getElementById('debtorBalance').textContent = formatZAR(debtor.balance);
            document.getElementById('debtorEmail').textContent = debtor.email || 'N/A';
            document.getElementById('debtorPhone').textContent = debtor.phone || 'N/A';
        }

        // Stock Search and Line Items
        function initializeStockSearch() {
            const stockSearch = document.getElementById('stockSearch');
            let debounceTimeout;

            stockSearch.addEventListener('input', function() {
                clearTimeout(debounceTimeout);
                debounceTimeout = setTimeout(async () => {
                    const searchTerm = this.value.trim();
                    if (searchTerm.length < 2) return;

                    try {
                        const response = await fetch(`?handler=SearchStock&searchTerm=${encodeURIComponent(searchTerm)}`);
                        if (!response.ok) throw new Error('Search failed');

                        const stocks = await response.json();
                        showStockSearchResults(stocks);
                    } catch (error) {
                        console.error('Error:', error);
                        showNotification('Failed to search stock items', 'error');
                    }
                }, 300);
            });
        }

        function showStockSearchResults(stocks) {
            const resultsDiv = document.createElement('div');
            resultsDiv.className = 'list-group position-absolute w-100 shadow';
            resultsDiv.style.zIndex = '1000';

            stocks.forEach(stock => {
                const item = document.createElement('a');
                item.className = 'list-group-item list-group-item-action';
                item.innerHTML = `
                    <div class="d-flex justify-content-between">
                        <div>
                            <strong>${stock.stockCode}</strong> - ${stock.stockDescription}
                        </div>
                        <div>
                            Price: ${formatZAR(stock.sellingPrice)} | Stock: ${stock.stockOnHand}
                        </div>
                    </div>
                `;
                item.addEventListener('click', () => selectStock(stock));
                resultsDiv.appendChild(item);
            });

            const searchInput = document.getElementById('stockSearch');
            const existingResults = document.querySelector('#addItemModal .list-group');
            if (existingResults) existingResults.remove();

            searchInput.parentNode.appendChild(resultsDiv);
        }

        function selectStock(stock) {
            document.getElementById('selectedStockId').value = stock.stockID;
            document.getElementById('stockCode').value = stock.stockCode;
            document.getElementById('stockDescription').value = stock.stockDescription;
            document.getElementById('unitPrice').value = stock.sellingPrice;
            document.getElementById('availableStock').textContent = stock.stockOnHand;
            document.querySelector('#addItemModal .list-group')?.remove();

            // Clear and focus quantity
            document.getElementById('quantity').value = "1";
            document.getElementById('discount').value = "0";
            calculateLineTotal();
            document.getElementById('quantity').focus();
        }

        function calculateLineTotal() {
            const quantity = parseFloat(document.getElementById('quantity').value) || 0;
            const unitPrice = parseFloat(document.getElementById('unitPrice').value) || 0;
            const discount = parseFloat(document.getElementById('discount').value) || 0;

            const total = (quantity * unitPrice) - discount;
            document.getElementById('lineTotal').textContent = formatZAR(total);
        }

        function updateLineItemsTable() {
            const tbody = document.querySelector('#lineItemsTable tbody');
            tbody.innerHTML = '';

            lineItems.forEach((item, index) => {
                const row = tbody.insertRow();
                row.innerHTML = `
                    <td class="text-start">${item.stockCode}</td>
                    <td class="text-start">${item.description}</td>
                    <td class="text-end">${item.quantity}</td>
                    <td class="text-end">${formatZAR(item.unitPrice)}</td>
                    <td class="text-end">${formatZAR(item.discount)}</td>
                    <td class="text-end">${formatZAR((item.quantity * item.unitPrice) - item.discount)}</td>
                    <td class="text-center">
                        <button type="button" class="btn btn-sm btn-danger" onclick="removeLineItem(${index})">
                            <i class="fas fa-trash"></i>
                        </button>
                    </td>
                `;
            });
        }

        function removeLineItem(index) {
            lineItems.splice(index, 1);
            updateLineItemsTable();
            updateTotals();
        }

        function updateTotals() {
            const subtotal = lineItems.reduce((sum, item) =>
                sum + ((item.quantity * item.unitPrice) - item.discount), 0);
            const vat = subtotal * VAT_RATE;
            const total = subtotal + vat;

            document.getElementById('subtotal').textContent = formatZAR(subtotal);
            document.getElementById('vat').textContent = formatZAR(vat);
            document.getElementById('grandTotal').textContent = formatZAR(total);
        }

        function resetForm() {
            // Clear debtor selection
            document.getElementById('selectedDebtorId').value = '';
            document.getElementById('debtorSearch').value = '';
            document.getElementById('debtorDetails').style.display = 'none';

            // Reset line items
            lineItems = [];
            updateLineItemsTable();
            updateTotals();

            // Reset date to current
            initializeInvoiceDate();

            // Clear any error messages
            document.querySelectorAll('.is-invalid').forEach(el => {
                el.classList.remove('is-invalid');
            });
            document.querySelectorAll('.invalid-feedback').forEach(el => {
                el.remove();
            });
        }

        function formatZAR(amount) {
            return new Intl.NumberFormat('en-ZA', {
                style: 'currency',
                currency: 'ZAR',
                minimumFractionDigits: 2,
                maximumFractionDigits: 2
            }).format(amount);
        }

        // Event listeners for line item calculations
        const quantityInput = document.getElementById('quantity');
        const unitPriceInput = document.getElementById('unitPrice');
        const discountInput = document.getElementById('discount');

        // Add event listeners for real-time calculation
        quantityInput?.addEventListener('input', calculateLineTotal);
        unitPriceInput?.addEventListener('input', calculateLineTotal);
        discountInput?.addEventListener('input', calculateLineTotal);

        // Add event listeners for validation
        quantityInput?.addEventListener('change', function() {
            const quantity = parseInt(this.value);
            const availableStock = parseInt(document.getElementById('availableStock').textContent);

            if (quantity <= 0) {
                this.value = 1;
                calculateLineTotal();
            } else if (quantity > availableStock) {
                this.value = availableStock;
                calculateLineTotal();
                showNotification('Quantity adjusted to available stock', 'warning');
            }
        });

        discountInput?.addEventListener('change', function() {
            const discount = parseFloat(this.value) || 0;
            const quantity = parseInt(quantityInput.value) || 0;
            const unitPrice = parseFloat(unitPriceInput.value) || 0;
            const total = quantity * unitPrice;

            if (discount < 0) {
                this.value = 0;
                calculateLineTotal();
            } else if (discount > total) {
                this.value = total;
                calculateLineTotal();
                showNotification('Discount cannot exceed total amount', 'warning');
            }
        });

        function addLineItem() {
            const stockId = document.getElementById('selectedStockId').value;
            if (!stockId) {
                showNotification('Please select a stock item', 'warning');
                return;
            }

            const quantity = parseInt(document.getElementById('quantity').value);
            const availableStock = parseInt(document.getElementById('availableStock').textContent);
            const unitPrice = parseFloat(document.getElementById('unitPrice').value);
            const discount = parseFloat(document.getElementById('discount').value) || 0;

            // Validate inputs
            if (quantity <= 0) {
                showNotification('Quantity must be greater than 0', 'warning');
                return;
            }

            if (quantity > availableStock) {
                showNotification('Quantity exceeds available stock', 'warning');
                return;
            }

            if (unitPrice <= 0) {
                showNotification('Invalid unit price', 'warning');
                return;
            }

            if (discount < 0) {
                showNotification('Discount cannot be negative', 'warning');
                return;
            }

            const lineItem = {
                stockId: stockId,
                stockCode: document.getElementById('stockCode').value,
                description: document.getElementById('stockDescription').value,
                quantity: quantity,
                unitPrice: unitPrice,
                discount: discount
            };

            // Add to line items array
            lineItems.push(lineItem);

            // Update table and totals
            updateLineItemsTable();
            updateTotals();

            // Clear the modal and hide it
            document.getElementById('stockSearch').value = '';
            document.getElementById('selectedStockId').value = '';
            document.getElementById('stockCode').value = '';
            document.getElementById('stockDescription').value = '';
            document.getElementById('quantity').value = '1';
            document.getElementById('unitPrice').value = '';
            document.getElementById('discount').value = '0';
            document.getElementById('availableStock').textContent = '0';
            document.getElementById('lineTotal').textContent = formatZAR(0);

            addItemModal.hide();

            // Show success notification
            showNotification('Item added successfully', 'success');
        }

        function showAddItemModal() {
            // Reset modal fields
            document.getElementById('stockSearch').value = '';
            document.getElementById('selectedStockId').value = '';
            document.getElementById('stockCode').value = '';
            document.getElementById('stockDescription').value = '';
            document.getElementById('quantity').value = '1';
            document.getElementById('unitPrice').value = '';
            document.getElementById('discount').value = '0';
            document.getElementById('availableStock').textContent = '0';
            document.getElementById('lineTotal').textContent = formatZAR(0);

            // Clear any previous search results
            const existingResults = document.querySelector('#addItemModal .list-group');
            if (existingResults) {
                existingResults.remove();
            }

            // Show modal
            addItemModal.show();

            // Focus on search field
            setTimeout(() => {
                document.getElementById('stockSearch').focus();
            }, 500);
        }

        // Initialize tooltips
        var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
        var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
            return new bootstrap.Tooltip(tooltipTriggerEl);
        });
    </script>
}